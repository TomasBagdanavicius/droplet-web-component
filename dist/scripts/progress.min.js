/*! Progress v1.0.0 */
class Progress{constructor(t){this.progressState={PENDING:1,RUNNING:2,PAUSED:3,COMPLETED:4},this.wrapper=t,this.bar=t.firstElementChild,this.valueElem=this.bar.nextElementSibling,this.stateElem=this.valueElem.nextElementSibling,this.abortButton=this.stateElem.nextElementSibling,this.setState(this.progressState.PENDING),this.value=0,this.timesCompleted=0,this.running=!1,this.animationFrame,this.abortButton.addEventListener("click",t=>{t.preventDefault()})}static createElement(){var t=document.createElement("div"),e=(t.classList.add("prog-msg"),document.createElement("div")),s=(e.classList.add("bar"),document.createElement("div")),n=(s.classList.add("val"),document.createElement("div")),i=(n.classList.add("state"),document.createElement("button"));return i.setAttribute("type","button"),i.classList.add("abort"),i.appendChild(document.createTextNode("Abort")),t.appendChild(e),t.appendChild(s),t.appendChild(n),t.appendChild(i),new Progress(t)}stateToText(t){switch(t){case 1:return"Pending";case 2:return"Running";case 3:return"Paused";case 4:return"Completed"}}setState(t){this.state=t;t=this.stateToText(this.state);this.stateElem.innerText=t,this.wrapper.setAttribute("data-state",t.toLowerCase())}isActive(){return!1!==this.running}isRunning(){return this.state===this.progressState.RUNNING}isPaused(){return this.state===this.progressState.PAUSED}setValue(t){t=Math.min(100,Math.max(0,t)),this.value=t,this.valueElem.innerText=Math.floor(t)+"%",this.wrapper.style.setProperty("--progress-value",Math.round(100*t)/100+"%")}progressTo(t,e=500){this.isActive()&&this.stop();let s={type:"single",initValue:this.value,nextValue:t,duration:e,pauseLength:0};return s.promise=new Promise((t,e)=>{s.resolution=[t,e]}),this.running=s,this.setState(this.progressState.RUNNING),this.runSingleGoalFrames()}runSingleGoalFrames(){if(this.running&&"single"==this.running.type){const e=t=>{this.running.startTime||(this.running.startTime=t);t=this.singleFrameHandler(t,this.running);!0!==t?(this.setValue(t),this.animationFrame=requestAnimationFrame(e)):(this.setValue(this.running.nextValue),this.running.resolution[0](),this.stop())};return this.animationFrame=requestAnimationFrame(e),this.running.promise}}singleFrameHandler(e,s){var e=e-s.startTime-s.pauseLength,n=100*e/s.duration;if(e<=s.duration){let t;return t=s.nextValue>s.initValue?(e=s.nextValue-s.initValue,s.initValue+n*e/100):(e=s.initValue-s.nextValue,s.initValue-n*e/100)}return!0}accumulateValue(t){let s=this.value+t;return s<=100?this.progressTo(s):new Promise((t,e)=>{e(new Error("The accumulated value exceeds maximum 100 with "+s+"."))})}progressPlanTo(t,e=1e4,s=500,n=10){this.isActive()&&this.stop(),this.setValue(0),this.setState(this.progressState.RUNNING),"number"==typeof t.max_times&&(n=t.max_times),n=Math.min(n,Math.floor(e/s));let i={type:"plan",plan:(t=t||Progress.generateRandomNumbers(Progress.randomBetweenTwoNumbers(90,99),n)).numbers,duration:s,timeout:e,pauseLength:0,times:n,finalValue:t.max};return i.promise=new Promise((t,e)=>{i.resolution=[t,e]}),this.running=i,this.runProgressPlanFrames()}runProgressPlanFrames(){if(this.running&&"plan"==this.running.type){const e=t=>{this.running.startTime||(this.running.startTime=t);t=this.planFrameHandler(t,this.running);"number"==typeof t||null===t?("number"==typeof t&&this.setValue(t),this.animationFrame=requestAnimationFrame(e)):(this.setValue(this.running.finalValue),this.running.resolution[0](),this.stop())};return this.animationFrame=requestAnimationFrame(e),this.running.promise}}planFrameHandler(e,s){var e=e-s.startTime-s.pauseLength,n=Math.round((s.timeout-s.duration*s.times)/(s.times-1)),i=s.duration+n,r=Math.floor(e/i),i=(r+1)*i-n,n=s.plan[r];if(e<=i){var a=s.plan.slice(0,r);let t=0;return a.length&&(t=a.reduce((t,e)=>t+e)),(r?100*(e-(i-s.duration))/s.duration:100*e/s.duration)*n/100+t}return r==s.times-1||null}stop(){this.isActive()&&(cancelAnimationFrame(this.animationFrame),this.running=!1,this.setState(this.progressState.PENDING))}complete(t=500){return this.value<100?this.progressTo(100,t).then(()=>{this.timesCompleted++,this.setState(this.progressState.COMPLETED)}):new Promise((t,e)=>{e(new Error("Can not complete, because progress value is already at "+this.value+"."))})}pause(){this.isRunning()&&(cancelAnimationFrame(this.animationFrame),this.running.pausedAt=performance.now(),this.setState(this.progressState.PAUSED))}resume(){var t;if(this.isPaused())return t=performance.now()-this.running.pausedAt,this.running.pauseLength=this.running.pauseLength+t,this.running.pausedAt=!1,this.setState(this.progressState.RUNNING),this.wrapper.classList.remove("paused"),"single"==this.running.type?this.runSingleGoalFrames():this.runProgressPlanFrames()}revert(){return this.progressTo(0).then(()=>{this.setState(this.progressState.PENDING)})}reset(){this.stop(),this.setValue(0),this.setState(this.progressState.PENDING)}static randomBetweenTwoNumbers(t,e){return Math.floor(Math.random()*(e-t+1)+t)}static generateRandomNumbers(s,n){var i=[];let r=0;for(let e=0;e<n-1;e++){var a=0==e?10:1,u=0==e?50:s-(n-e-1)-r;let t=1;1<u&&(t=Progress.randomBetweenTwoNumbers(a,u)),i[e]=t,r+=t}return i[n-1]=s-r,{numbers:i,max:s,max_times:n}}}export{Progress};